# -*- coding: utf-8 -*-
# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: experiments/holist/deephol.proto
"""Generated protocol buffer code."""
from google.protobuf import descriptor as _descriptor
from google.protobuf import descriptor_pool as _descriptor_pool
from google.protobuf import symbol_database as _symbol_database
from google.protobuf.internal import builder as _builder
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()


from environments.holist import proof_assistant_pb2 as environments_dot_holist_dot_proof__assistant__pb2


DESCRIPTOR = _descriptor_pool.Default().AddSerializedFile(b'\n experiments/holist/deephol.proto\x12\x10\x64\x65\x65pmath_deephol\x1a)environments/holist/proof_assistant.proto\"7\n\x0fIntegerInterval\x12\x11\n\tmin_value\x18\x01 \x01(\x05\x12\x11\n\tmax_value\x18\x02 \x01(\x05\"\xda\x02\n\x0e\x42\x46SMetaOptions\x12>\n\x13max_top_suggestions\x18\x01 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\x12\x42\n\x17max_successful_branches\x18\x02 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\x12=\n\x12max_explored_nodes\x18\x03 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\x12\x42\n\x17min_successful_branches\x18\x04 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\x12\x41\n\x16max_theorem_parameters\x18\x05 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\"\xce\x01\n\nBFSOptions\x12\x1f\n\x13max_top_suggestions\x18\x01 \x01(\x05:\x02\x32\x30\x12\"\n\x17max_successful_branches\x18\x02 \x01(\x05:\x01\x32\x12\x1f\n\x12max_explored_nodes\x18\x03 \x01(\x05:\x03\x32\x30\x30\x12\"\n\x17min_successful_branches\x18\x04 \x01(\x05:\x01\x31\x12\x36\n\x0cmeta_options\x18\x05 \x01(\x0b\x32 .deepmath_deephol.BFSMetaOptions\"\x92\x02\n\x16\x41\x63tionGeneratorOptions\x12\"\n\x16max_theorem_parameters\x18\x01 \x01(\x05:\x02\x32\x34\x12\x1d\n\x0e\x61sm_meson_only\x18\x02 \x01(\x08:\x05\x66\x61lse\x12\'\n\x18\x61sm_meson_no_params_only\x18\x03 \x01(\x08:\x05\x66\x61lse\x12$\n\x19random_tactic_probability\x18\x04 \x01(\x02:\x01\x30\x12\x41\n\x16num_similar_parameters\x18\x05 \x01(\x0b\x32!.deepmath_deephol.IntegerInterval\x12#\n\x14\x62\x61g_of_words_similar\x18\x06 \x01(\x08:\x05\x66\x61lse\"@\n\x0bProverRound\x12\x15\n\rstart_seconds\x18\x01 \x01(\x03\x12\x0b\n\x03tag\x18\x02 \x01(\t\x12\r\n\x05round\x18\x03 \x01(\x05\"\xa3\x06\n\rProverOptions\x12\x1d\n\x15path_theorem_database\x18\x01 \x01(\t\x12\x19\n\x11path_model_prefix\x18\x02 \x01(\t\x12\x14\n\x0cpath_tactics\x18\x03 \x01(\t\x12\x1c\n\x14path_tactics_replace\x18\x04 \x01(\t\x12\x1a\n\x12theorem_embeddings\x18\x05 \x01(\t\x12!\n\x0f\x62uiltin_library\x18\x06 \x01(\t:\x04\x63oreB\x02\x18\x01\x12\x0e\n\x06prover\x18\x07 \x01(\t\x12\x31\n\x0b\x62\x66s_options\x18\x08 \x01(\x0b\x32\x1c.deepmath_deephol.BFSOptions\x12\x30\n\x0fsplits_to_prove\x18\t \x03(\x0e\x32\x17.deepmath.Theorem.Split\x12\x1e\n\x0ftimeout_seconds\x18\n \x01(\x02:\x05\x31\x65+06\x12\x1d\n\x15path_emb_model_prefix\x18\x0b \x01(\t\x12M\n\x12model_architecture\x18\x0c \x01(\x0e\x32\x31.deepmath_deephol.ProverOptions.ModelArchitecture\x12J\n\x18\x61\x63tion_generator_options\x18\r \x01(\x0b\x32(.deepmath_deephol.ActionGeneratorOptions\x12\x33\n\x0cprover_round\x18\x0e \x01(\x0b\x32\x1d.deepmath_deephol.ProverRound\x12&\n\x18prune_theorem_parameters\x18\x0f \x01(\x08:\x04true\x12\x14\n\x0clibrary_tags\x18\x10 \x03(\t\x12\x1f\n\x11tactic_timeout_ms\x18\x11 \x01(\x03:\x04\x35\x30\x30\x30\"\x81\x01\n\x11ModelArchitecture\x12\x10\n\x0cPAIR_DEFAULT\x10\x00\x12\x0c\n\x08HIST_AVG\x10\x01\x12\r\n\tHIST_CONV\x10\x02\x12\x0c\n\x08HIST_ATT\x10\x03\x12!\n\x1dPARAMETERS_CONDITIONED_ON_TAC\x10\x04\x12\x0c\n\x08GNN_GOAL\x10\x05\"\xb6\x02\n\x08ProofLog\x12*\n\x05nodes\x18\x01 \x03(\x0b\x32\x1b.deepmath_deephol.ProofNode\x12\x15\n\rerror_message\x18\x02 \x01(\t\x12\x12\n\nnum_proofs\x18\x03 \x01(\x03\x12\x37\n\x0eprover_options\x18\x04 \x01(\x0b\x32\x1f.deepmath_deephol.ProverOptions\x12\x12\n\ntime_spent\x18\x05 \x01(\x03\x12\x17\n\x08rejected\x18\x06 \x01(\x08:\x05\x66\x61lse\x12\x12\n\nbuild_data\x18\x07 \x01(\t\x12)\n\x0bprover_task\x18\x08 \x01(\x0b\x32\x14.deepmath.ProverTask\x12.\n\x13theorem_in_database\x18\t \x01(\x0b\x32\x11.deepmath.Theorem\"\xf7\x01\n\tProofNode\x12\x1f\n\x04goal\x18\x01 \x01(\x0b\x32\x11.deepmath.Theorem\x12\x33\n\x06proofs\x18\x02 \x03(\x0b\x32#.deepmath_deephol.TacticApplication\x12;\n\x06status\x18\x03 \x01(\x0e\x32\".deepmath_deephol.ProofNode.Status:\x07UNKNOWN\x12\'\n\x1f\x61\x63tion_generation_time_millisec\x18\x04 \x01(\x03\".\n\x06Status\x12\x0b\n\x07UNKNOWN\x10\x00\x12\n\n\x06PROVED\x10\x01\x12\x0b\n\x07REFUTED\x10\x02\"\xc2\x01\n\x06Tactic\x12\n\n\x02id\x18\x01 \x01(\x03\x12\x0c\n\x04name\x18\x02 \x01(\t\x12?\n\x0fparameter_types\x18\x03 \x03(\x0e\x32&.deepmath_deephol.Tactic.ParameterType\"]\n\rParameterType\x12\x0b\n\x07UNKNOWN\x10\x00\x12\x0c\n\x08VARIABLE\x10\x01\x12\x08\n\x04TERM\x10\x02\x12\x0b\n\x07THEOREM\x10\x03\x12\x10\n\x0cTHEOREM_LIST\x10\x04\x12\x08\n\x04\x43ONV\x10\x05\"\xe5\x02\n\x11TacticApplication\x12\x0e\n\x06tactic\x18\x01 \x01(\t\x12\x35\n\nparameters\x18\x02 \x03(\x0b\x32!.deepmath_deephol.TacticParameter\x12#\n\x08subgoals\x18\x03 \x03(\x0b\x32\x11.deepmath.Theorem\x12:\n\x06result\x18\x04 \x01(\x0e\x32*.deepmath_deephol.TacticApplication.Result\x12\x15\n\rerror_message\x18\x05 \x01(\t\x12\x12\n\ntime_spent\x18\x06 \x01(\x05\x12\x15\n\x06\x63losed\x18\x07 \x01(\x08:\x05\x66\x61lse\x12\r\n\x05score\x18\x08 \x01(\x02\x12\x0c\n\x04rank\x18\t \x01(\x05\"I\n\x06Result\x12\x0b\n\x07UNKNOWN\x10\x00\x12\t\n\x05\x45RROR\x10\x01\x12\x0b\n\x07TIMEOUT\x10\x02\x12\r\n\tUNCHANGED\x10\x03\x12\x0b\n\x07SUCCESS\x10\x04\"8\n\x0bTacticsInfo\x12)\n\x07tactics\x18\x01 \x03(\x0b\x32\x18.deepmath_deephol.Tactic\"\xd6\x01\n\x0fTacticParameter\x12>\n\x0eparameter_type\x18\x01 \x01(\x0e\x32&.deepmath_deephol.Tactic.ParameterType\x12#\n\x08theorems\x18\x02 \x03(\x0b\x32\x11.deepmath.Theorem\x12\x0c\n\x04term\x18\x03 \x01(\t\x12\x0c\n\x04\x63onv\x18\x04 \x01(\t\x12\x0f\n\x07unknown\x18\x05 \x01(\t\x12\x31\n\x16hard_negative_theorems\x18\x06 \x03(\x0b\x32\x11.deepmath.Theorem')

_globals = globals()
_builder.BuildMessageAndEnumDescriptors(DESCRIPTOR, _globals)
_builder.BuildTopDescriptorsAndMessages(DESCRIPTOR, 'experiments.holist.deephol_pb2', _globals)
if _descriptor._USE_C_DESCRIPTORS == False:

  DESCRIPTOR._options = None
  _PROVEROPTIONS.fields_by_name['builtin_library']._options = None
  _PROVEROPTIONS.fields_by_name['builtin_library']._serialized_options = b'\030\001'
  _globals['_INTEGERINTERVAL']._serialized_start=97
  _globals['_INTEGERINTERVAL']._serialized_end=152
  _globals['_BFSMETAOPTIONS']._serialized_start=155
  _globals['_BFSMETAOPTIONS']._serialized_end=501
  _globals['_BFSOPTIONS']._serialized_start=504
  _globals['_BFSOPTIONS']._serialized_end=710
  _globals['_ACTIONGENERATOROPTIONS']._serialized_start=713
  _globals['_ACTIONGENERATOROPTIONS']._serialized_end=987
  _globals['_PROVERROUND']._serialized_start=989
  _globals['_PROVERROUND']._serialized_end=1053
  _globals['_PROVEROPTIONS']._serialized_start=1056
  _globals['_PROVEROPTIONS']._serialized_end=1859
  _globals['_PROVEROPTIONS_MODELARCHITECTURE']._serialized_start=1730
  _globals['_PROVEROPTIONS_MODELARCHITECTURE']._serialized_end=1859
  _globals['_PROOFLOG']._serialized_start=1862
  _globals['_PROOFLOG']._serialized_end=2172
  _globals['_PROOFNODE']._serialized_start=2175
  _globals['_PROOFNODE']._serialized_end=2422
  _globals['_PROOFNODE_STATUS']._serialized_start=2376
  _globals['_PROOFNODE_STATUS']._serialized_end=2422
  _globals['_TACTIC']._serialized_start=2425
  _globals['_TACTIC']._serialized_end=2619
  _globals['_TACTIC_PARAMETERTYPE']._serialized_start=2526
  _globals['_TACTIC_PARAMETERTYPE']._serialized_end=2619
  _globals['_TACTICAPPLICATION']._serialized_start=2622
  _globals['_TACTICAPPLICATION']._serialized_end=2979
  _globals['_TACTICAPPLICATION_RESULT']._serialized_start=2906
  _globals['_TACTICAPPLICATION_RESULT']._serialized_end=2979
  _globals['_TACTICSINFO']._serialized_start=2981
  _globals['_TACTICSINFO']._serialized_end=3037
  _globals['_TACTICPARAMETER']._serialized_start=3040
  _globals['_TACTICPARAMETER']._serialized_end=3254
# @@protoc_insertion_point(module_scope)
